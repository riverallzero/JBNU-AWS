# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron:  "*/10 * * * *"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi 
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics 
    - name: Set Secrets 
      env: 
        WRITE_KEY: ${{ secrets.WRITE_KEY }}
        READ_KEY: ${{ secrets.READ_KEY }}
      run: python main.py
    - name: Set Git Config
      run: |
        git config --global user.name "riverallzero"
        git config --global user.email "riverallzero@naver.com"
    - name: Check for changes
      id: check_changes
      run: |
        if [ -n "$(git diff --name-only README.md)" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
    - name: Commit Update
      run: |
        echo steps.check_changes.outputs.has_changes=${{steps.check_changes.outputs.has_changes}}
        if ${{steps.check_changes.outputs.has_changes}} = 'true'; then
          git add README.md
          git commit -m "Updated current data"
          git push
        else
          echo "No changes detected."
        fi
